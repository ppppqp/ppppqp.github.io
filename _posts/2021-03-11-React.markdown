---

title:  "React Life Cycle"
date:   2021-03-11 20:29:23 +0800
categories: Front-end Note React
toc: true
---

# React Lifecycle
[React API](https://reactjs.org/docs/react-component.html)

There are three phases: Mounting, Updating, Unmounting.
## 1. Mounting
"Mounting Means putting elements into the DOM".
Methods called when mounting a component:
1. `constructor()`(optional)
2. `getDerivedStateFromProps()`(optional)
3. `render()`(required)
4. `componentDidMount()`(optional)
### 1.1 `constructor()`
If you **don’t** initialize state and you don’t bind methods, you **don’t** need to implement a constructor for your React component.

Default as `constructor(){}`
```js
constructor(props) {
  super(props);
  // Don't call this.setState() here!
  // assign directly
  this.state = { counter: 0 };
  // Don't do this! unnecessay and won't properly update
  this.state = { color: props.color };
  this.handleClick = this.handleClick.bind(this);
  // if you are not using constructor, you don't have to do the binding(at least in my experience)
}
```

* purposes of `constructor`
  * Initializing local state by assigning an object to this.state.
  * Binding event handler methods to an instance
* `super`: [reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/super)
The super keyword is used to access and call functions on an object's parent.\
When used in a constructor, the `super` keyword appears alone and must be used before the this keyword is used. The `super` keyword can also be used to call functions on a parent object.\
Often used in the `extend`(inheritance) senario.
***If don't call super, this.props will be undefined in the constructor.***

example from MDN:
```js
class Rectangle {
  constructor(height, width) {
    this.name = 'Rectangle';
    this.height = height;
    this.width = width;
  }
  sayName() {
    console.log('Hi, I am a ', this.name + '.');
  }
  get area() {
    return this.height * this.width;
  }
  set area(value) {
    this._area = value;
  }
}

class Square extends Rectangle {
  constructor(length) {
    this.height; // ReferenceError, super needs to be called first!

    // Here, it calls the parent class's constructor with lengths
    // provided for the Rectangle's width and height
    super(length, length);

    // Note: In derived classes, super() must be called before you
    // can use 'this'. Leaving this out will cause a reference error.
    this.name = 'Square';
  }
}
```

#### something more on binding:
[React API](https://reactjs.org/docs/handling-events.html)
> If calling bind annoys you, there are two ways you can get around this. If you are using the experimental public class fields syntax, you can use class fields to correctly bind callbacks:
 ```js
class LoggingButton extends React.Component {
  // This syntax ensures `this` is bound within handleClick.
  // Warning: this is *experimental* syntax.
  handleClick = () => {
    console.log('this is:', this);
  }
  render() {
    return (
      <button onClick={this.handleClick}>
        Click me
      </button>
    );
  }
}
```
>This syntax is enabled by default in Create React App.
>If you aren’t using class fields syntax, you can use an arrow function in the callback:

Problem of arrow function
The problem with this syntax is that a different callback is created each time the LoggingButton renders. In most cases, this is fine. However, if this callback is passed as a prop to lower components, those components might do an extra re-rendering. We generally recommend binding in the constructor or using the class fields syntax, to avoid this sort of performance problem.

### 1.2 `static getDerivedStateFromProps()`[Rarely Used]
This is the natural place to set the state object based on the initial props.
Used when the state depends on the props.
Return an object to update state.
example:[MDN](https://www.w3schools.com/react/react_lifecycle.asp)

```js
class Header extends React.Component {
  constructor(props) {
    super(props);
    this.state = {favoritecolor: "red"};
  }
  static getDerivedStateFromProps(props, state) {
    return {favoritecolor: props.favcol };
  }
  render() {
    return (
      <h1>My Favorite Color is {this.state.favoritecolor}</h1>
    );
  }
}
```

### 1.3 `Render()`

The render() method is required, and is the method that actually outputs the HTML to the DOM.
Return type:
* React elements. 
* Arrays and fragments. 
* **Portals**. Let you render children into a different DOM subtree.
* **Booleans or null**. Render nothing. (Mostly exists to support `return test && <Child />` pattern, where test is boolean.)

### 1.4 `componentDidMount()`
called **after** `render()`
This is where you run statements that requires that the component is already placed in the DOM.

example:[MDN](https://www.w3schools.com/react/react_lifecycle.asp)
```js
class Header extends React.Component {
  constructor(props) {
    super(props);
    this.state = {favoritecolor: "red"};
  }
  componentDidMount() {
    setTimeout(() => {
      this.setState({favoritecolor: "yellow"})
    }, 1000)
  }
  render() {
    return (
      <h1>My Favorite Color is {this.state.favoritecolor}</h1>
    );
  }
}

ReactDOM.render(<Header />, document.getElementById('root'));
```

## 2 Updating
A component is updated whenever there is a change in the component's `state` or `props`.
### 2.1 `getDerivedStateFromProps()`
### 2.2 `componentDidUpdate()`
```js
componentDidUpdate(prevProps) {
  // Typical usage (don't forget to compare props):
  if (this.props.userID !== prevProps.userID) {
    this.fetchData(this.props.userID);
  }
}

```
You may call `setState()` immediately in componentDidUpdate() but note that it must be wrapped in a condition like in the example above, or you’ll cause an infinite loop.


### 2.3 `componentWillUnmount()`
componentWillUnmount() is invoked immediately before a component is unmounted and destroyed. Perform any necessary cleanup in this method, such as invalidating timers, canceling network requests, or cleaning up any subscriptions that were created in componentDidMount().

**You should not call** ` setState()` **in**  `componentWillUnmount()`because the component will never be re-rendered. Once a component instance is unmounted, it will never be mounted again.

## Notes on `setState()`
**State Updates May Be Asynchronous!!**

```js
// Wrong
this.setState({
  counter: this.state.counter + this.props.increment,
});
// Correct
this.setState((state, props) => ({
  counter: state.counter + props.increment
}));
```
To fix it, use a second form of setState() that accepts a function rather than an object. That function will receive the previous state as the first argument, and the props at the time the update is applied as the second argument:

## Thinking: Data Flows Down
Neither parent nor child components can know if a certain component is stateful or stateless, and they shouldn’t care whether it is defined as a function or a class.
**States are Local.**
This is commonly called a “top-down” or “unidirectional” data flow. Any state is always owned by some specific component, and any data or UI derived from that state can only affect components “below” them in the tree.